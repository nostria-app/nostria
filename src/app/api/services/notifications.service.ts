/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { NotificationResult } from '../models/notification-result';
import { notificationSendPost } from '../fn/notifications/notification-send-post';
import { NotificationSendPost$Params } from '../fn/notifications/notification-send-post';
import { NotificationStatus } from '../models/notification-status';
import { notificationStatusPubkeyGet } from '../fn/notifications/notification-status-pubkey-get';
import { NotificationStatusPubkeyGet$Params } from '../fn/notifications/notification-status-pubkey-get';


/**
 * Push notification management and delivery
 */
@Injectable({ providedIn: 'root' })
export class NotificationsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `notificationSendPost()` */
  static readonly NotificationSendPostPath = '/notification/send';

  /**
   * Send notifications to users.
   *
   * Send push notifications to specified users or broadcast to all users. Supports both legacy template-based format
   * and new direct notification format. Handles rate limiting, user preferences, and device management automatically.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationSendPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  notificationSendPost$Response(params: NotificationSendPost$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationResult>> {
    return notificationSendPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Send notifications to users.
   *
   * Send push notifications to specified users or broadcast to all users. Supports both legacy template-based format
   * and new direct notification format. Handles rate limiting, user preferences, and device management automatically.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationSendPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  notificationSendPost(params: NotificationSendPost$Params, context?: HttpContext): Observable<NotificationResult> {
    return this.notificationSendPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<NotificationResult>): NotificationResult => r.body)
    );
  }

  /** Path part for operation `notificationStatusPubkeyGet()` */
  static readonly NotificationStatusPubkeyGetPath = '/notification/status/{pubkey}';

  /**
   * Get notification status for a user.
   *
   * Retrieve comprehensive notification status for a specific user including subscription status,
   * device count, premium status, notification settings, and usage statistics.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationStatusPubkeyGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationStatusPubkeyGet$Response(params: NotificationStatusPubkeyGet$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationStatus>> {
    return notificationStatusPubkeyGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get notification status for a user.
   *
   * Retrieve comprehensive notification status for a specific user including subscription status,
   * device count, premium status, notification settings, and usage statistics.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationStatusPubkeyGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationStatusPubkeyGet(params: NotificationStatusPubkeyGet$Params, context?: HttpContext): Observable<NotificationStatus> {
    return this.notificationStatusPubkeyGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<NotificationStatus>): NotificationStatus => r.body)
    );
  }

}
