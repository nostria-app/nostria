/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { keyGet } from '../fn/keys/key-get';
import { KeyGet$Params } from '../fn/keys/key-get';
import { VapidKey } from '../models/vapid-key';


/**
 * Cryptographic key management endpoints
 */
@Injectable({ providedIn: 'root' })
export class KeysService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `keyGet()` */
  static readonly KeyGetPath = '/key';

  /**
   * Get service public VAPID key.
   *
   * Retrieve the public VAPID (Voluntary Application Server Identification) key
   * required for Web Push notification subscriptions. This key is used by clients
   * to identify the server when subscribing to push notifications.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `keyGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  keyGet$Response(params?: KeyGet$Params, context?: HttpContext): Observable<StrictHttpResponse<VapidKey>> {
    return keyGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get service public VAPID key.
   *
   * Retrieve the public VAPID (Voluntary Application Server Identification) key
   * required for Web Push notification subscriptions. This key is used by clients
   * to identify the server when subscribing to push notifications.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `keyGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  keyGet(params?: KeyGet$Params, context?: HttpContext): Observable<VapidKey> {
    return this.keyGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<VapidKey>): VapidKey => r.body)
    );
  }

}
