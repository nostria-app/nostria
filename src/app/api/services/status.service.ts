/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { HealthStatus } from '../models/health-status';
import { ServiceStatus } from '../models/service-status';
import { statusGet } from '../fn/status/status-get';
import { StatusGet$Params } from '../fn/status/status-get';
import { statusHealthGet } from '../fn/status/status-health-get';
import { StatusHealthGet$Params } from '../fn/status/status-health-get';


/**
 * Service status and health monitoring endpoints
 */
@Injectable({ providedIn: 'root' })
export class StatusService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `statusGet()` */
  static readonly StatusGetPath = '/status';

  /**
   * Get comprehensive service status.
   *
   * Retrieve detailed information about the service including version, uptime, environment,
   * VAPID key, and system information. System information is deprecated and will be removed
   * in future versions for security reasons.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `statusGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  statusGet$Response(params?: StatusGet$Params, context?: HttpContext): Observable<StrictHttpResponse<ServiceStatus>> {
    return statusGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get comprehensive service status.
   *
   * Retrieve detailed information about the service including version, uptime, environment,
   * VAPID key, and system information. System information is deprecated and will be removed
   * in future versions for security reasons.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `statusGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  statusGet(params?: StatusGet$Params, context?: HttpContext): Observable<ServiceStatus> {
    return this.statusGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<ServiceStatus>): ServiceStatus => r.body)
    );
  }

  /** Path part for operation `statusHealthGet()` */
  static readonly StatusHealthGetPath = '/status/health';

  /**
   * Health check endpoint.
   *
   * Simple health check endpoint that returns the service availability status.
   * Used for load balancer health checks and monitoring systems.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `statusHealthGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  statusHealthGet$Response(params?: StatusHealthGet$Params, context?: HttpContext): Observable<StrictHttpResponse<HealthStatus>> {
    return statusHealthGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Health check endpoint.
   *
   * Simple health check endpoint that returns the service availability status.
   * Used for load balancer health checks and monitoring systems.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `statusHealthGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  statusHealthGet(params?: StatusHealthGet$Params, context?: HttpContext): Observable<HealthStatus> {
    return this.statusHealthGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<HealthStatus>): HealthStatus => r.body)
    );
  }

}
