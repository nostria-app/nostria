/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { settingsAdminReleaseChannelChannelGet } from '../fn/settings/settings-admin-release-channel-channel-get';
import { SettingsAdminReleaseChannelChannelGet$Params } from '../fn/settings/settings-admin-release-channel-channel-get';
import { settingsPubkeyDelete } from '../fn/settings/settings-pubkey-delete';
import { SettingsPubkeyDelete$Params } from '../fn/settings/settings-pubkey-delete';
import { settingsPubkeyGet } from '../fn/settings/settings-pubkey-get';
import { SettingsPubkeyGet$Params } from '../fn/settings/settings-pubkey-get';
import { settingsPubkeyPatch } from '../fn/settings/settings-pubkey-patch';
import { SettingsPubkeyPatch$Params } from '../fn/settings/settings-pubkey-patch';
import { settingsPubkeyPost } from '../fn/settings/settings-pubkey-post';
import { SettingsPubkeyPost$Params } from '../fn/settings/settings-pubkey-post';
import { SuccessResponse } from '../models/success-response';
import { UsersByReleaseChannel } from '../models/users-by-release-channel';


/**
 * User settings management and preferences
 */
@Injectable({ providedIn: 'root' })
export class SettingsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `settingsPubkeyGet()` */
  static readonly SettingsPubkeyGetPath = '/settings/{pubkey}';

  /**
   * Get user settings.
   *
   * Retrieve user settings for a specific public key. Requires NIP-98 authentication
   * to ensure users can only access their own settings.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `settingsPubkeyGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  settingsPubkeyGet$Response(params: SettingsPubkeyGet$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponse>> {
    return settingsPubkeyGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get user settings.
   *
   * Retrieve user settings for a specific public key. Requires NIP-98 authentication
   * to ensure users can only access their own settings.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `settingsPubkeyGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  settingsPubkeyGet(params: SettingsPubkeyGet$Params, context?: HttpContext): Observable<SuccessResponse> {
    return this.settingsPubkeyGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponse>): SuccessResponse => r.body)
    );
  }

  /** Path part for operation `settingsPubkeyPost()` */
  static readonly SettingsPubkeyPostPath = '/settings/{pubkey}';

  /**
   * Create or update user settings.
   *
   * Create new user settings or update existing ones. Requires NIP-98 authentication.
   * Validates release channel and social sharing preferences before saving.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `settingsPubkeyPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  settingsPubkeyPost$Response(params: SettingsPubkeyPost$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponse>> {
    return settingsPubkeyPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create or update user settings.
   *
   * Create new user settings or update existing ones. Requires NIP-98 authentication.
   * Validates release channel and social sharing preferences before saving.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `settingsPubkeyPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  settingsPubkeyPost(params: SettingsPubkeyPost$Params, context?: HttpContext): Observable<SuccessResponse> {
    return this.settingsPubkeyPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponse>): SuccessResponse => r.body)
    );
  }

  /** Path part for operation `settingsPubkeyDelete()` */
  static readonly SettingsPubkeyDeletePath = '/settings/{pubkey}';

  /**
   * Delete user settings.
   *
   * Permanently delete all user settings for a specific public key.
   * Requires NIP-98 authentication and verifies settings exist before deletion.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `settingsPubkeyDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  settingsPubkeyDelete$Response(params: SettingsPubkeyDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'success'?: boolean;
'message'?: string;
}>> {
    return settingsPubkeyDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete user settings.
   *
   * Permanently delete all user settings for a specific public key.
   * Requires NIP-98 authentication and verifies settings exist before deletion.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `settingsPubkeyDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  settingsPubkeyDelete(params: SettingsPubkeyDelete$Params, context?: HttpContext): Observable<{
'success'?: boolean;
'message'?: string;
}> {
    return this.settingsPubkeyDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'success'?: boolean;
'message'?: string;
}>): {
'success'?: boolean;
'message'?: string;
} => r.body)
    );
  }

  /** Path part for operation `settingsPubkeyPatch()` */
  static readonly SettingsPubkeyPatchPath = '/settings/{pubkey}';

  /**
   * Update specific user settings fields.
   *
   * Partially update user settings by providing only the fields that need to be changed.
   * Requires NIP-98 authentication and validates all provided fields.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `settingsPubkeyPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  settingsPubkeyPatch$Response(params: SettingsPubkeyPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponse>> {
    return settingsPubkeyPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update specific user settings fields.
   *
   * Partially update user settings by providing only the fields that need to be changed.
   * Requires NIP-98 authentication and validates all provided fields.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `settingsPubkeyPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  settingsPubkeyPatch(params: SettingsPubkeyPatch$Params, context?: HttpContext): Observable<SuccessResponse> {
    return this.settingsPubkeyPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponse>): SuccessResponse => r.body)
    );
  }

  /** Path part for operation `settingsAdminReleaseChannelChannelGet()` */
  static readonly SettingsAdminReleaseChannelChannelGetPath = '/settings/admin/release-channel/{channel}';

  /**
   * Get users by release channel (admin endpoint).
   *
   * Administrative endpoint to retrieve all users subscribed to a specific release channel.
   * Returns user count and list of public keys for marketing or deployment purposes.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `settingsAdminReleaseChannelChannelGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  settingsAdminReleaseChannelChannelGet$Response(params: SettingsAdminReleaseChannelChannelGet$Params, context?: HttpContext): Observable<StrictHttpResponse<UsersByReleaseChannel>> {
    return settingsAdminReleaseChannelChannelGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get users by release channel (admin endpoint).
   *
   * Administrative endpoint to retrieve all users subscribed to a specific release channel.
   * Returns user count and list of public keys for marketing or deployment purposes.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `settingsAdminReleaseChannelChannelGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  settingsAdminReleaseChannelChannelGet(params: SettingsAdminReleaseChannelChannelGet$Params, context?: HttpContext): Observable<UsersByReleaseChannel> {
    return this.settingsAdminReleaseChannelChannelGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<UsersByReleaseChannel>): UsersByReleaseChannel => r.body)
    );
  }

}
