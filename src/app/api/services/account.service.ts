/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Account } from '../models/account';
import { addAccount } from '../fn/account/add-account';
import { AddAccount$Params } from '../fn/account/add-account';
import { ApiResponse } from '../models/api-response';
import { getAccount } from '../fn/account/get-account';
import { GetAccount$Params } from '../fn/account/get-account';
import { getPublicAccount } from '../fn/account/get-public-account';
import { GetPublicAccount$Params } from '../fn/account/get-public-account';
import { getTiers } from '../fn/account/get-tiers';
import { GetTiers$Params } from '../fn/account/get-tiers';
import { TierDetails } from '../models/tier-details';
import { updateAccount } from '../fn/account/update-account';
import { UpdateAccount$Params } from '../fn/account/update-account';

@Injectable({ providedIn: 'root' })
export class AccountService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTiers()` */
  static readonly GetTiersPath = '/account/tiers';

  /**
   * Get available subscription tiers.
   *
   * Retrieve all available subscription tiers and their details
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTiers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTiers$Response(params?: GetTiers$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: TierDetails;
}>> {
    return getTiers(this.http, this.rootUrl, params, context);
  }

  /**
   * Get available subscription tiers.
   *
   * Retrieve all available subscription tiers and their details
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTiers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTiers(params?: GetTiers$Params, context?: HttpContext): Observable<{
[key: string]: TierDetails;
}> {
    return this.getTiers$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: TierDetails;
}>): {
[key: string]: TierDetails;
} => r.body)
    );
  }

  /** Path part for operation `getAccount()` */
  static readonly GetAccountPath = '/account';

  /**
   * Get authenticated user's account.
   *
   * Retrieve the authenticated user's account information
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAccount()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAccount$Response(params?: GetAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<Account>> {
    return getAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Get authenticated user's account.
   *
   * Retrieve the authenticated user's account information
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAccount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAccount(params?: GetAccount$Params, context?: HttpContext): Observable<Account> {
    return this.getAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<Account>): Account => r.body)
    );
  }

  /** Path part for operation `updateAccount()` */
  static readonly UpdateAccountPath = '/account';

  /**
   * Update authenticated user's account.
   *
   * Update the authenticated user's account information
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAccount$Response(params: UpdateAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<Account>> {
    return updateAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Update authenticated user's account.
   *
   * Update the authenticated user's account information
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAccount(params: UpdateAccount$Params, context?: HttpContext): Observable<Account> {
    return this.updateAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<Account>): Account => r.body)
    );
  }

  /** Path part for operation `addAccount()` */
  static readonly AddAccountPath = '/account';

  /**
   * Create a new account.
   *
   * Register a new user account
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addAccount$Response(params: AddAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<Account>> {
    return addAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new account.
   *
   * Register a new user account
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addAccount(params: AddAccount$Params, context?: HttpContext): Observable<Account> {
    return this.addAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<Account>): Account => r.body)
    );
  }

  /** Path part for operation `getPublicAccount()` */
  static readonly GetPublicAccountPath = '/account/{pubkeyOrUsername}';

  /**
   * Get public account information.
   *
   * Retrieve public information about a user account
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPublicAccount()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPublicAccount$Response(params: GetPublicAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponse>> {
    return getPublicAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Get public account information.
   *
   * Retrieve public information about a user account
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPublicAccount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPublicAccount(params: GetPublicAccount$Params, context?: HttpContext): Observable<ApiResponse> {
    return this.getPublicAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponse>): ApiResponse => r.body)
    );
  }

}
