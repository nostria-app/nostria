/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { backupGet } from '../fn/backup/backup-get';
import { BackupGet$Params } from '../fn/backup/backup-get';
import { backupJobIdGet } from '../fn/backup/backup-job-id-get';
import { BackupJobIdGet$Params } from '../fn/backup/backup-job-id-get';
import { BackupJobResponse } from '../models/backup-job-response';
import { backupPost } from '../fn/backup/backup-post';
import { BackupPost$Params } from '../fn/backup/backup-post';

@Injectable({ providedIn: 'root' })
export class BackupService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `backupGet()` */
  static readonly BackupGetPath = '/backup';

  /**
   * Get user's backup jobs.
   *
   * Retrieve a list of all backup jobs for the authenticated user
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `backupGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  backupGet$Response(params?: BackupGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'jobs'?: Array<BackupJobResponse>;

/**
 * Total number of jobs returned
 */
'total'?: number;
}>> {
    return backupGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get user's backup jobs.
   *
   * Retrieve a list of all backup jobs for the authenticated user
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `backupGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  backupGet(params?: BackupGet$Params, context?: HttpContext): Observable<{
'jobs'?: Array<BackupJobResponse>;

/**
 * Total number of jobs returned
 */
'total'?: number;
}> {
    return this.backupGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'jobs'?: Array<BackupJobResponse>;

/**
 * Total number of jobs returned
 */
'total'?: number;
}>): {
'jobs'?: Array<BackupJobResponse>;

/**
 * Total number of jobs returned
 */
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `backupPost()` */
  static readonly BackupPostPath = '/backup';

  /**
   * Create a new backup job.
   *
   * Request a backup of user data. The backup will be processed asynchronously by a background worker.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `backupPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  backupPost$Response(params: BackupPost$Params, context?: HttpContext): Observable<StrictHttpResponse<BackupJobResponse>> {
    return backupPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new backup job.
   *
   * Request a backup of user data. The backup will be processed asynchronously by a background worker.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `backupPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  backupPost(params: BackupPost$Params, context?: HttpContext): Observable<BackupJobResponse> {
    return this.backupPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<BackupJobResponse>): BackupJobResponse => r.body)
    );
  }

  /** Path part for operation `backupJobIdGet()` */
  static readonly BackupJobIdGetPath = '/backup/{jobId}';

  /**
   * Get backup job details.
   *
   * Retrieve the status and details of a specific backup job
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `backupJobIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  backupJobIdGet$Response(params: BackupJobIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<BackupJobResponse>> {
    return backupJobIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get backup job details.
   *
   * Retrieve the status and details of a specific backup job
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `backupJobIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  backupJobIdGet(params: BackupJobIdGet$Params, context?: HttpContext): Observable<BackupJobResponse> {
    return this.backupJobIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<BackupJobResponse>): BackupJobResponse => r.body)
    );
  }

}
