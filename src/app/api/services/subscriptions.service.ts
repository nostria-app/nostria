/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { subscriptionSendPubkeyPost } from '../fn/subscriptions/subscription-send-pubkey-post';
import { SubscriptionSendPubkeyPost$Params } from '../fn/subscriptions/subscription-send-pubkey-post';
import { subscriptionWebpushPubkeyPost } from '../fn/subscriptions/subscription-webpush-pubkey-post';
import { SubscriptionWebpushPubkeyPost$Params } from '../fn/subscriptions/subscription-webpush-pubkey-post';


/**
 * Web Push subscription management and device registration
 */
@Injectable({ providedIn: 'root' })
export class SubscriptionsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `subscriptionSendPubkeyPost()` */
  static readonly SubscriptionSendPubkeyPostPath = '/subscription/send/{pubkey}';

  /**
   * Send test notification to user's devices.
   *
   * Send a test notification to all registered devices for a specific user.
   * Primarily used for testing push notification functionality and syncing data across devices.
   * Requires NIP-98 authentication.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `subscriptionSendPubkeyPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  subscriptionSendPubkeyPost$Response(params: SubscriptionSendPubkeyPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'message'?: string;
'success'?: boolean;
}>> {
    return subscriptionSendPubkeyPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Send test notification to user's devices.
   *
   * Send a test notification to all registered devices for a specific user.
   * Primarily used for testing push notification functionality and syncing data across devices.
   * Requires NIP-98 authentication.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `subscriptionSendPubkeyPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  subscriptionSendPubkeyPost(params: SubscriptionSendPubkeyPost$Params, context?: HttpContext): Observable<{
'message'?: string;
'success'?: boolean;
}> {
    return this.subscriptionSendPubkeyPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'message'?: string;
'success'?: boolean;
}>): {
'message'?: string;
'success'?: boolean;
} => r.body)
    );
  }

  /** Path part for operation `subscriptionWebpushPubkeyPost()` */
  static readonly SubscriptionWebpushPubkeyPostPath = '/subscription/webpush/{pubkey}';

  /**
   * Register Web Push subscription for a user.
   *
   * Register a new Web Push subscription for a user's device. This enables the device
   * to receive push notifications. Automatically sends a welcome notification to test
   * the subscription. Requires NIP-98 authentication.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `subscriptionWebpushPubkeyPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  subscriptionWebpushPubkeyPost$Response(params: SubscriptionWebpushPubkeyPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'success'?: boolean;
'message'?: string;
}>> {
    return subscriptionWebpushPubkeyPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Register Web Push subscription for a user.
   *
   * Register a new Web Push subscription for a user's device. This enables the device
   * to receive push notifications. Automatically sends a welcome notification to test
   * the subscription. Requires NIP-98 authentication.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `subscriptionWebpushPubkeyPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  subscriptionWebpushPubkeyPost(params: SubscriptionWebpushPubkeyPost$Params, context?: HttpContext): Observable<{
'success'?: boolean;
'message'?: string;
}> {
    return this.subscriptionWebpushPubkeyPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'success'?: boolean;
'message'?: string;
}>): {
'success'?: boolean;
'message'?: string;
} => r.body)
    );
  }

}
