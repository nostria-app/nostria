/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { BackupJobResponse } from '../../models/backup-job-response';

export interface BackupGet$Params {

/**
 * Maximum number of backup jobs to return
 */
  limit?: number;
}

export function backupGet(http: HttpClient, rootUrl: string, params?: BackupGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'jobs'?: Array<BackupJobResponse>;

/**
 * Total number of jobs returned
 */
'total'?: number;
}>> {
  const rb = new RequestBuilder(rootUrl, backupGet.PATH, 'get');
  if (params) {
    rb.query('limit', params.limit, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<{
      'jobs'?: Array<BackupJobResponse>;
      
      /**
       * Total number of jobs returned
       */
      'total'?: number;
      }>;
    })
  );
}

backupGet.PATH = '/backup';
